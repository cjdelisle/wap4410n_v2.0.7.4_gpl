/*
 * Note: this file originally auto-generated by mib2c using
 *        : mib2c.mike.conf, 2007/08/15 10:00:00, 
 *        Base on mib2c.old-api.conf,v 1.4 2004/07/28 08:04:58 dts12 Exp $
 */
#ifndef INDOOR_H
#define INDOOR_H
#define _BONJOUR_
#define WS_UID_LEN      8
#define WAC_UID_LEN     8
#define WLAS_UID_LEN    8
#define WLNS_UID_LEN    8
#define WLO_UID_LEN     8
#define WLCL_UID_LEN    8
#define WLS_UID_LEN     8
#define VQOS_UID_LEN    8
#define LAS_UID_LEN     8
#define WLAR_UID_LEN    8
#define ACML_UID_LEN    8
#define LAL_UID_LEN     8
#define WLNW_UID_LEN    8


/****************************************************************************
*                               Includes                                    *
****************************************************************************/
#include <net-snmp/net-snmp-config.h>
#include <net-snmp/library/container.h>
#include <net-snmp/agent/table_array.h>

#include <sys/queue.h>

/****************************************************************************
*                             Linked List Defines                           *
****************************************************************************/
// here are some Linked List MACROS I wanted to use, 
// but curiously were not in /usr/includes/sys/queue.h

#ifndef LIST_EMPTY
  #define	LIST_EMPTY(head)	((head)->lh_first == NULL)
#endif

#ifndef LIST_NEXT
  #define	LIST_NEXT(elm, field)	((elm)->field.le_next)
#endif

#ifndef LIST_INSERT_BEFORE
  #define	LIST_INSERT_BEFORE(listelm, elm, field) do {			\
	  (elm)->field.le_prev = (listelm)->field.le_prev;		\
	  LIST_NEXT((elm), field) = (listelm);				\
	  *(listelm)->field.le_prev = (elm);				\
	  (listelm)->field.le_prev = &LIST_NEXT((elm), field);		\
  } while (0)
#endif

#ifndef LIST_FIRST
  #define	LIST_FIRST(head)	((head)->lh_first)
#endif


/****************************************************************************
*                           Linked List Structure                           *
****************************************************************************/
static struct axNode {  
  LIST_ENTRY ( axNode ) nodes; 
  char *data;                                 // pointer to data
};

typedef LIST_HEAD ( , axNode ) axList_t;

/****************************************************************************
*                          wiredStatisticsTable                             *
****************************************************************************/
static struct wsTbl_data
{
  char  UID[WS_UID_LEN + 1];
  long  lanIndex;
  
  long  lanIpAddress;
  char  lanMacAddress[33];
  long  lanConnectionStatus;
  char  lanRecvPackets[33];
  char  lanSendPackets[33];
  char  lanRecvBytes[33];
  char  lanSendBytes[33];
  char  lanRecvErrorPackets[33];
  char  lanRecvDropPackets[33];
} nws, *ws = &nws;

static axList_t wsList;

/****************************************************************************
*                          wlanAccessControlTable                           *
****************************************************************************/
static struct wacTbl_data
{
    char UID[WAC_UID_LEN + 1];
    long radioIndex;
    long aclSSIDIndex;
    
    long accessControlMode;
    long localMacMode;
} nwac, *wac = &nwac;

static axList_t wacList;

/****************************************************************************
*                          wlanSettingTable                                 *
****************************************************************************/
static struct wlasTbl_data
{
    char UID[WLAS_UID_LEN + 1];
    long radioIndex;
    
    long wirelessMode;
    long channel;
    long channelBandWidth;
    long region;
    long dot11mode;
    long guardInterval;
    long ctsProtectionMode;
    long beaconInterval;
    long dtimInterval;
    long rtsThreshold;
    long fragmentationThreshold;
    long isolutionBetweenSSID;
} nwlas, *wlas = &nwlas;

static axList_t wlasList;

/****************************************************************************
*                          wirelessNetworkSSIDTable                         *
****************************************************************************/
static struct wlnsTbl_data
{
    char UID[WLNS_UID_LEN + 1];
    long radioIndex;
    long ssidIndex;
    
    char currentSSID[128];
    char currentSSIDMacAddress[33];
    char currentSSIDSecurity[33];
    char currentSSIDPriority[33];
} nwlns, *wlns = &nwlns;

static axList_t wlnsList;

/****************************************************************************
*                          wlanOperationTable                               *
****************************************************************************/
static struct wloTbl_data
{
    char UID[WLO_UID_LEN + 1];
    long radioIndex;
    
    long operationMode;
    char remoteRepeatMacAddress1[33];
    char remoteRepeatMacAddress2[33];
    char remoteRepeatMacAddress3[33];
    char remoteAPMacAddress[33];
    char remoteBridgeMacAddress1[33];
    char remoteBridgeMacAddress2[33];
    char remoteBridgeMacAddress3[33];
    char remoteBridgeMacAddress4[33];
    char remoteAPSSID[128];
    char remoteAPMac[33];
    long rogueApType;
} nwlo, *wlo = &nwlo;

static axList_t wloList;

/****************************************************************************
*                          wlanWirelessClientListTable                      *
****************************************************************************/
static struct wlclTbl_data
{
    char UID[WLCL_UID_LEN + 1];
    long radioIndex;
    long clientIndex;
    long clientRow;
    
    char clientMacAddress[33];
char clientRate[16];
    char clientRssi[16];
    char clientStatus[32];
} nwlcl, *wlcl = &nwlcl;

static axList_t wlclList;

/****************************************************************************
*                          wirelessStatisticsTable                          *
****************************************************************************/
static struct wlsTbl_data
{
    char UID[WLS_UID_LEN + 1];
    long radioIndex;
    long ssidIndex;
    
    long ssidIPAddress;
    char ssidMacAddress[33];
    long ssidConnectionStatus;
    char ssidRecvPackets[33];
    char ssidSendPackets[33];
    char ssidRecvByets[33];
    char ssidSendByets[33];
    char ssidRecvErrorPackets[33];
    char ssidRecvDropPackets[33];
    
} nwls, *wls = &nwls;

static axList_t wlsList;

/****************************************************************************
*                          vlanQOSTable                                     *
****************************************************************************/
static struct vqosTbl_data
{
    char UID[VQOS_UID_LEN + 1];
    long radioIndex;
    long profileSSIDIndex;
    
    long profileVlan;
    long profilePriority;
    long profileWMM;
} nvqos, *vqos = &nvqos;

static axList_t vqosList;

/****************************************************************************
*                          wlanSecurityTable                                *
****************************************************************************/
static struct lasTbl_data
{
    char UID[LAS_UID_LEN + 1];
    long radioIndex;
    long wlanSSIDIndex;
    
    char ssid[255];
    long ssidBroadcastMode;
    long ssidIsolationWithinSSID;
    long securityMode;
    long wepKeyIndex;
    long wepKeyLength;
    char wepKey1[255];
    char wepKey2[255];
    char wepKey3[255];
    char wepKey4[255];
    char wpaPSK[255];
    long wpaKeyRenewal;
    
} nlas, *las = &nlas;

static axList_t lasList;

/****************************************************************************
*                          wlanRadiusTable                                  *
****************************************************************************/
static struct wlarTbl_data
{
    char UID[WLAR_UID_LEN + 1];
    long radioIndex;
    long radiusIndex;
    
    long radiusAuthPrimaryServerIP;
    long radiusAuthPrimaryServerPort;
    char radiusAuthPrimaryServerKey[128];
    long radiusAuthSecondaryServerIP;
    long radiusAuthSecondaryServerPort;
    char radiusAuthSecondaryServerKey[128];
} nwlar, *wlar = &nwlar;

static axList_t wlarList;

/****************************************************************************
*                          wlanAccessControlMACListTable                    *
****************************************************************************/
static struct acmlTbl_data
{
    char UID[ACML_UID_LEN + 1];
    long radioIndex;
    long aclIndex;
    long aclRow;
    
    char aclMac[33];
} nacml, *acml = &nacml;

static axList_t acmlList;

/****************************************************************************
*                          wlanLegalApListTable                             *
****************************************************************************/
static struct lalTbl_data
{
    char UID[LAL_UID_LEN + 1];
    long apIndex;
    
    char apMAC[33];
    
} nlal, *lal = &nlal;

static axList_t lalList;

/****************************************************************************
*                          wirelessNetworkTable                             *
****************************************************************************/
static struct wlnwTbl_data
{
    char UID[WLNW_UID_LEN + 1];
    long radioIndex;
    
    long currentMode;
    char currentChannel[33];
    long currentVlanTrunk;
    long currentPriority;
} nwlnw, *wlnw = &nwlnw;

static axList_t wlnwList;

/****************************************************************************
*                          private MIB structures                           *
****************************************************************************/
static struct indoor {

//timeSettings
    long timesetmode;
    char date[11];
    char time[9];
    long ntpmode;
	char ntpserver[128];
	long timezone;
	long daylightsaving;
//lanIPv4Settings	
	long dhcpv4enalbe;
	long lanipv4addr;
	long lanip4netmask;
	long ipv4gateway;
	long ipv4dns1;
	long ipv4dns2;
//lanIPv6Settings
    long ipv6mode;
    char ipv6addr[45];
    char ipv6prefixlenth[32];
    char ipv6gateway[45];
    char ipv6dns1[45];
    char ipv6dns2[45];
//sysSettings
    char hostname[40];
	char devicename[40];
#if 0
	long stpmode;
#endif
//etherdot1xsup	
	long dot1xsuppenable;
	long dot1xsupmode;
	char dot1xsuppusername[64];
	char dot1xsupppasswd[64];
#ifdef _BONJOUR_
//BonjourMode
	long bonjourmode;
	/*long csbdpmode;
	long bhttpmode;
	long bsshmode;*/
#endif
//httpRedirectSettings
    long redirectmode;
    char redirectUrl[128];
//localNetwork
    char hwversion[128];
	char swversion[128];
	char localmacaddr[33];
	char sysuptime[128];
	long ipv4addr;
	long ip4netmask;    
//vlansettings    
	long vlanmode;
    long defaultvlanid;
	long vlantag;
	long managementvlanid;
	long vlanoverwds;
//	char wdsvlanlist[26];
//adminlogin
	char login[128];
	char newpasswd[128];
	long httpmode;
	long httpsmode;
	long wlaccessmode;
	long sshmode;
//snmpsettings
	long snpmode;
	char snmpcontact[255];
	char snmpdevicename[255];
	char snmplocation[255];
	char snmpreadcomm[255];
	char snmpwritecomm[255];
	char trapcomm[255];
	long snmpmanagerany;
	long snmpmanagestart;
	long snmpmanageend;
	long snptrapdestvip;
//logsettings
    long emailalertmode;
    char emailalertserver[128];
    char emailalertaddr[128];
    long emailqueuelenth;
    long emailsendperiod;
	long syslogmode;
	long syslogserver;
	long loginsuccessmode;
	long loginfailmode;
	long syserrormode;
	long confchangemode;
//auxcommand
	long savesettings;
	long rebootap;
	long resettofactorydefault;
}nin, *in = &nin;

/****************************************************************************
*                          ieee80211_stats                                  *
****************************************************************************/
#define SIOCG80211STATS     (SIOCDEVPRIVATE+2)
	struct ieee80211_stats {
	    u_int32_t   is_rx_badversion;   /* rx frame with bad version */
	    u_int32_t   is_rx_tooshort;     /* rx frame too short */
	    u_int32_t   is_rx_wrongbss;     /* rx from wrong bssid */
	    u_int32_t   is_rx_dup;      	/* rx discard 'cuz dup */
	    u_int32_t   is_rx_wrongdir;     /* rx w/ wrong direction */
	    u_int32_t   is_rx_mcastecho;    /* rx discard 'cuz mcast echo */
	    u_int32_t   is_rx_notassoc;     /* rx discard 'cuz sta !assoc */
	    u_int32_t   is_rx_noprivacy;    /* rx w/ wep but privacy off */
	    u_int32_t   is_rx_unencrypted;  /* rx w/o wep and privacy on */
	    u_int32_t   is_rx_wepfail;      /* rx wep processing failed */
	    u_int32_t   is_rx_decap;        /* rx decapsulation failed */
	    u_int32_t   is_rx_mgtdiscard;   /* rx discard mgt frames */
	    u_int32_t   is_rx_ctl;      	/* rx discard ctrl frames */
	    u_int32_t   is_rx_beacon;       /* rx beacon frames */
	    u_int32_t   is_rx_rstoobig;     /* rx rate set truncated */
	    u_int32_t   is_rx_elem_missing; /* rx required element missing*/
	    u_int32_t   is_rx_elem_toobig;  /* rx element too big */
	    u_int32_t   is_rx_elem_toosmall;    /* rx element too small */
	    u_int32_t   is_rx_elem_unknown; /* rx element unknown */
	    u_int32_t   is_rx_badchan;      /* rx frame w/ invalid chan */
	    u_int32_t   is_rx_chanmismatch; /* rx frame chan mismatch */
	    u_int32_t   is_rx_nodealloc;    /* rx frame dropped */
	    u_int32_t   is_rx_ssidmismatch; /* rx frame ssid mismatch  */
	    u_int32_t   is_rx_auth_unsupported; /* rx w/ unsupported auth alg */
	    u_int32_t   is_rx_auth_fail;    /* rx sta auth failure */
	    u_int32_t   is_rx_auth_countermeasures;/* rx auth discard 'cuz CM */
	    /* Add/Change By Terry Yang  Begin ==> */
	    u_int32_t   is_rx_assoc;        /* rx assoc */
	    u_int32_t   is_rx_reassoc;        /* rx reassoc */
	    u_int32_t   is_rx_auth;        /* rx reassoc */
	    u_int32_t   is_rx_mgmt;        /* rx reassoc */
	    u_int32_t   is_tx_mgmt;        /* rx reassoc */
	    u_int32_t   is_rx_data;        /* rx reassoc */
	    u_int32_t   is_tx_data;        /* rx reassoc */
	    /* <== Add End */ 
	    u_int32_t   is_rx_assoc_bss;    /* rx assoc from wrong bssid */
	    u_int32_t   is_rx_assoc_notauth;    /* rx assoc w/o auth */
	    u_int32_t   is_rx_assoc_capmismatch;/* rx assoc w/ cap mismatch */
	    u_int32_t   is_rx_assoc_norate; /* rx assoc w/ no rate match */
	    u_int32_t   is_rx_assoc_badwpaie;   /* rx assoc w/ bad WPA IE */
	    u_int32_t   is_rx_deauth;       /* rx deauthentication */
	    u_int32_t   is_rx_disassoc;     /* rx disassociation */
	    u_int32_t   is_rx_action;       /* rx action mgt */
	    u_int32_t   is_rx_badsubtype;   /* rx frame w/ unknown subtype*/
	    u_int32_t   is_rx_nobuf;        /* rx failed for lack of buf */
	    u_int32_t   is_rx_decryptcrc;   /* rx decrypt failed on crc */
	    u_int32_t   is_rx_ahdemo_mgt;   /* rx discard ahdemo mgt frame*/
	    u_int32_t   is_rx_bad_auth;     /* rx bad auth request */
	    u_int32_t   is_rx_unauth;       /* rx on unauthorized port */
	    u_int32_t   is_rx_badkeyid;     /* rx w/ incorrect keyid */
	    u_int32_t   is_rx_ccmpreplay;   /* rx seq# violation (CCMP) */
	    u_int32_t   is_rx_ccmpformat;   /* rx format bad (CCMP) */
	    u_int32_t   is_rx_ccmpmic;      /* rx MIC check failed (CCMP) */
	    u_int32_t   is_rx_tkipreplay;   /* rx seq# violation (TKIP) */
	    u_int32_t   is_rx_tkipformat;   /* rx format bad (TKIP) */
	    u_int32_t   is_rx_tkipmic;      /* rx MIC check failed (TKIP) */
	    u_int32_t   is_rx_tkipicv;      /* rx ICV check failed (TKIP) */
	    u_int32_t   is_rx_badcipher;    /* rx failed 'cuz key type */
	    u_int32_t   is_rx_nocipherctx;  /* rx failed 'cuz key !setup */
	    u_int32_t   is_rx_acl;      /* rx discard 'cuz acl policy */
	    u_int32_t   is_rx_ffcnt;        /* rx fast frames */
	    u_int32_t   is_rx_badathtnl;    /* driver key alloc failed */
	    u_int32_t   is_tx_nobuf;        /* tx failed for lack of buf */
	    u_int32_t   is_tx_nonode;       /* tx failed for no node */
	    u_int32_t   is_tx_unknownmgt;   /* tx of unknown mgt frame */
	    u_int32_t   is_tx_badcipher;    /* tx failed 'cuz key type */
	    u_int32_t   is_tx_nodefkey;     /* tx failed 'cuz no defkey */
	    u_int32_t   is_tx_noheadroom;   /* tx failed 'cuz no space */
	    u_int32_t   is_tx_ffokcnt;      /* tx fast frames sent success */
	    u_int32_t   is_tx_fferrcnt;     /* tx fast frames sent success */
	    u_int32_t   is_scan_active;     /* active scans started */
	    u_int32_t   is_scan_passive;    /* passive scans started */
	    u_int32_t   is_node_timeout;    /* nodes timed out inactivity */
	    u_int32_t   is_crypto_nomem;    /* no memory for crypto ctx */
	    u_int32_t   is_crypto_tkip;     /* tkip crypto done in s/w */
	    u_int32_t   is_crypto_tkipenmic;    /* tkip en-MIC done in s/w */
	    u_int32_t   is_crypto_tkipdemic;    /* tkip de-MIC done in s/w */
	    u_int32_t   is_crypto_tkipcm;   /* tkip counter measures */
	    u_int32_t   is_crypto_ccmp;     /* ccmp crypto done in s/w */
	    u_int32_t   is_crypto_wep;      /* wep crypto done in s/w */
	    u_int32_t   is_crypto_setkey_cipher;/* cipher rejected key */
	    u_int32_t   is_crypto_setkey_nokey; /* no key index for setkey */
	    u_int32_t   is_crypto_delkey;   /* driver key delete failed */
	    u_int32_t   is_crypto_badcipher;    /* unknown cipher */
	    u_int32_t   is_crypto_nocipher; /* cipher not available */
	    u_int32_t   is_crypto_attachfail;   /* cipher attach failed */
	    u_int32_t   is_crypto_swfallback;   /* cipher fallback to s/w */
	    u_int32_t   is_crypto_keyfail;  /* driver key alloc failed */
	    u_int32_t   is_crypto_enmicfail;    /* en-MIC failed */
	    u_int32_t   is_ibss_capmismatch;    /* merge failed-cap mismatch */
	    u_int32_t   is_ibss_norate;     /* merge failed-rate mismatch */
	    u_int32_t   is_ps_unassoc;      /* ps-poll for unassoc. sta */
	    u_int32_t   is_ps_badaid;       /* ps-poll w/ incorrect aid */
	    u_int32_t   is_ps_qempty;       /* ps-poll w/ nothing to send */
	};


/*
 * function declarations 
 */
void            init_wap4410n(void);
FindVarMethod   var_indoor;
FindVarMethod   var_wiredStatisticsTable;
FindVarMethod   var_wlanAccessControlTable;
FindVarMethod   var_wlanSettingTable;
FindVarMethod   var_wirelessNetworkSSIDTable;
FindVarMethod   var_wlanOperationTable;
FindVarMethod   var_wlanWirelessClientListTable;
FindVarMethod   var_wirelessStatisticsTable;
FindVarMethod   var_vlanQOSTable;
FindVarMethod   var_wlanSecurityTable;
FindVarMethod   var_wlanRadiusTable;
FindVarMethod   var_wlanAccessControlMACListTable;
FindVarMethod   var_wlanLegalApListTable;
FindVarMethod   var_wirelessNetworkTable;
WriteMethod     write_timeDaylightSaving;
WriteMethod     write_snmpTrustedAny;
WriteMethod     write_emailAlertAddress;
WriteMethod     write_snmpContact;
WriteMethod     write_password;
WriteMethod     write_saveSettings;
WriteMethod     write_defaultVlanId;
WriteMethod     write_syslogMode;
WriteMethod     write_userName;
WriteMethod     write_timeSetMode;
WriteMethod     write_snmpTrustedHostEnd;
WriteMethod     write_vlanMode;
WriteMethod     write_deviceName;
WriteMethod     write_snmpTrustedHostStart;
WriteMethod     write_logLoginSuccessMode;
WriteMethod     write_setDate;
WriteMethod     write_syslogServer;
WriteMethod     write_snmpCommunityGet;
WriteMethod     write_resetToFactoryDefault;
WriteMethod     write_snmpTrapDestIP;
WriteMethod     write_wirelessAccessMode;
WriteMethod     write_snmpLocation;
WriteMethod     write_lanIPv6PrefixLength;
WriteMethod     write_emailQueueLength;
WriteMethod     write_lanIPv4SecondaryDns;
WriteMethod     write_ntpServer;
WriteMethod     write_eth1xSuppName;
WriteMethod     write_lanIPv4DhcpClientMode;
WriteMethod     write_lanIPv6Address;
WriteMethod     write_vlanOverWDS;
WriteMethod     write_lanIPv6PrimaryDns;
WriteMethod     write_timeTimeZone;
WriteMethod     write_httpRedirectMode;
#ifdef _BONJOUR_
WriteMethod     write_BonjourMode;
/*WriteMethod     write_CsbdpMode;
WriteMethod     write_BhttpMode;
WriteMethod     write_BsshMode;*/
#endif
WriteMethod     write_eth1xSuppMac;
WriteMethod     write_emailSendPeriod;
WriteMethod     write_httpsMode;
WriteMethod     write_eth1xSuppPwd;
WriteMethod     write_lanIPv6Gateway;
WriteMethod     write_lanIPv4Netmask;
WriteMethod     write_eth1xSuppMode;
WriteMethod     write_setTime;
WriteMethod     write_snmpDeviceName;
WriteMethod     write_logLoginFailMode;
WriteMethod     write_lanIPv6Mode;
WriteMethod     write_managementVlanId;
WriteMethod     write_vlanTag;
WriteMethod     write_httpRedirectURL;
WriteMethod     write_lanIPv4Gateway;
WriteMethod     write_lanIPv6SecondaryDns;
WriteMethod     write_lanIPv4Address;
WriteMethod     write_rebootAP;
WriteMethod     write_snmpMode;
WriteMethod     write_snmpTrapCommunity;
WriteMethod     write_logConfChangeMode;
WriteMethod     write_lanIPv4PrimaryDns;
WriteMethod     write_snmpCommunitySet;
WriteMethod     write_logSystemErrorMode;
WriteMethod     write_emailAlertServer;
WriteMethod     write_sshMode;
WriteMethod     write_ntpMode;
WriteMethod     write_hostName;
WriteMethod     write_emailAlertMode;
//WriteMethod     write_wdsVlanList;
WriteMethod     write_accessControlMode;
WriteMethod     write_localMacMode;
WriteMethod     write_wirelessMode;
WriteMethod     write_channel;
WriteMethod     write_channelBandwidth;
WriteMethod     write_region;
WriteMethod     write_dot11dMode;
WriteMethod     write_guardInterval;
WriteMethod     write_ctsProtectionMode;
WriteMethod     write_beaconInterval;
WriteMethod     write_dtimInterval;
WriteMethod     write_rtsThreshold;
WriteMethod     write_fragmentationThreshold;
WriteMethod     write_isolationBetweenSSID;
WriteMethod     write_operationMode;
WriteMethod     write_remoteRepeatMacAddress1;
WriteMethod     write_remoteRepeatMacAddress2;
WriteMethod     write_remoteRepeatMacAddress3;
WriteMethod     write_remoteAPMacAddress;
WriteMethod     write_remoteBridgeMacAddress1;
WriteMethod     write_remoteBridgeMacAddress2;
WriteMethod     write_remoteBridgeMacAddress3;
WriteMethod     write_remoteBridgeMacAddress4;
WriteMethod     write_remoteAPSSID;
WriteMethod     write_remoteAPMac;
WriteMethod     write_rogueApType;
WriteMethod     write_profileVlan;
WriteMethod     write_profilePriority;
WriteMethod     write_profileWMM;
WriteMethod     write_ssid;
WriteMethod     write_ssidBroadcastMode;
WriteMethod     write_ssidIsolationWithinSSID;
WriteMethod     write_securityMode;
WriteMethod     write_wepKeyIndex;
WriteMethod     write_wepKeyLength;
WriteMethod     write_wepKey1;
WriteMethod     write_wepKey2;
WriteMethod     write_wepKey3;
WriteMethod     write_wepKey4;
WriteMethod     write_wpaPSK;
WriteMethod     write_wpaKeyRenewal;
WriteMethod     write_radiusAuthPrimaryServerIP;
WriteMethod     write_radiusAuthPrimaryServerPort;
WriteMethod     write_radiusAuthPrimaryServerKey;
WriteMethod     write_radiusAuthSecondaryServerIP;
WriteMethod     write_radiusAuthSecondaryServerPort;
WriteMethod     write_radiusAuthSecondaryServerKey;

#endif                          /* INDOOR_H */
